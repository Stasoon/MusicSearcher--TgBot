import psutil
from aiogram import Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.types import KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup, Message, CallbackQuery
from aiogram.utils.callback_data import CallbackData

from src.misc.admin_states import StatsGetting
from src.database import users
from src.database.songs_hashes import get_hashed_songs_count


statistic_callback_data = CallbackData('statistic', 'value')

language_emoji_map = {
    'ru': 'üá∑üá∫',
    'uk': 'üá∫üá¶',
    'uz': 'üá∫üáø',
    'en': 'üá¨üáß',
    None: 'üè≥Ô∏è'
}


class Keyboards:
    reply_button_for_admin_menu = KeyboardButton('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üìä')

    menu_markup = InlineKeyboardMarkup(row_width=2)\
        .add(
        InlineKeyboardButton(text='–ú–µ—Å—è—Ü', callback_data=statistic_callback_data.new('month')),
        InlineKeyboardButton(text='–ù–µ–¥–µ–ª—è', callback_data=statistic_callback_data.new('week')),
        InlineKeyboardButton(text='–°—É—Ç–∫–∏', callback_data=statistic_callback_data.new('day')),
        InlineKeyboardButton(text='–ß–∞—Å', callback_data=statistic_callback_data.new('hour')),
        InlineKeyboardButton(text='‚å® –î—Ä—É–≥–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ', callback_data=statistic_callback_data.new('other')),
    )

    back_markup = InlineKeyboardMarkup().add(
        InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data=statistic_callback_data.new('back'))
    )


class Messages:
    @staticmethod
    def get_statistic_info(key: str) -> str:
        return {
            'all_time': f'–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞–ª–æ—Å—å –±–æ—Ç–æ–º: <b>{users.get_users_total_count()} —é–∑–µ—Ä–æ–≤</b>',
            'month': Messages.get_count_per_hours('–º–µ—Å—è—Ü', 30 * 24),
            'week': Messages.get_count_per_hours('–Ω–µ–¥–µ–ª—é', 7 * 24),
            'day': Messages.get_count_per_hours('—Å—É—Ç–∫–∏', 24),
            'hour': Messages.get_count_per_hours('—á–∞—Å', 1),
            'other': 'üîò –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤, –∑–∞ –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É: ',
        }.get(key)

    @staticmethod
    def __get_server_load_text():
        cpu_percent = psutil.cpu_percent(interval=1)  # interval - –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        memory_info = psutil.virtual_memory()
        memory_volume = memory_info.total / (1024 ** 3)
        used_memory = memory_info.used / (1024 ** 3)

        return (
            f'üíª –ù–∞–≥—Ä—É–∑–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: \n'
            f'‚ûñ –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä: {cpu_percent}% \n'
            f'‚ûñ –û–ø–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–º—è—Ç—å: {memory_info.percent}% ({used_memory:.2f} –ì–± / {memory_volume:.2f} –ì–±) \n'
        )

    @staticmethod
    def get_menu():
        languages = users.get_users_languages()
        text = (
            f'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ \n\n'
            f'üéµ –ü–µ—Å–µ–Ω –≤ –∫—ç—à–µ: {get_hashed_songs_count()} \n'
            f'üë• –í—Å–µ–≥–æ: {users.get_users_total_count()} \n'
        )

        text += ' | '.join(
            [f"{language_emoji_map.get(lang)} {users.get_users_count_by_language(lang)}"
             for lang in languages]
        )
        text += '\n\n' + Messages.__get_server_load_text()

        return text + f' \nüìä –í—ã–±–µ—Ä–∏—Ç–µ, –∑–∞ –∫–∞–∫–æ–π –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É:'

    @staticmethod
    def get_count_per_hours(time_word: str, hours: int):
        return f'–ó–∞ {time_word} –≤ –±–æ—Ç–∞ –ø—Ä–∏—à–ª–∏: \n' \
               f'<b>{users.get_users_registered_within_hours_count(hours)} —é–∑–µ—Ä–∞(–æ–≤)</b>'


class Handlers:
    @staticmethod
    async def __handle_admin_statistic_button(message: Message):
        await message.answer(text=Messages.get_menu(), reply_markup=Keyboards.menu_markup)

    @staticmethod
    async def __handle_show_stats_callback(callback: CallbackQuery, state: FSMContext,
                                           callback_data: statistic_callback_data):
        value = callback_data.get('value')
        message = callback.message

        if value == 'back':
            await message.edit_text(text=Messages.get_menu(), reply_markup=Keyboards.menu_markup)
            await state.finish()
            return

        response = Messages.get_statistic_info(value)
        if response:
            await message.edit_text(text=response, reply_markup=Keyboards.back_markup)
        if value == 'other':
            await state.set_state(StatsGetting.wait_for_hours_count)

    @staticmethod
    async def __handle_get_hours_message(message: Message, state: FSMContext):
        if not message.text.isdigit():
            await message.answer('‚ùó–í—ã –≤–≤–µ–ª–∏ –Ω–µ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:', reply_markup=Keyboards.back_markup)
            return

        users_count = users.get_users_registered_within_hours_count(int(message.text))
        await message.answer(
            text=Messages.get_count_per_hours(f'{message.text} —á–∞—Å–æ–≤', users_count),
            reply_markup=Keyboards.back_markup
        )
        await state.finish()

    @classmethod
    def register_admin_statistic_handlers(cls, dp: Dispatcher):
        dp.register_message_handler(
            cls.__handle_admin_statistic_button, is_admin=True,
            text=Keyboards.reply_button_for_admin_menu.text
        )

        dp.register_callback_query_handler(
            cls.__handle_show_stats_callback, statistic_callback_data.filter(), state='*'
        )

        dp.register_message_handler(
            cls.__handle_get_hours_message,
            is_admin=True, state=StatsGetting.wait_for_hours_count
        )


