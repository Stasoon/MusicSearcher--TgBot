from urllib.parse import urlparse

from aiogram import Dispatcher, types
from aiogram.dispatcher import FSMContext
from aiogram.utils.callback_data import CallbackData
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.exceptions import Unauthorized

from src.misc.admin_states import ChannelAdding
from src.database.channel import get_channels, save_channel, delete_channel


# region AddChannels

class Keyboards:
    channel_callback = CallbackData('channel', 'id', 'action')
    reply_button_for_admin_menu = types.KeyboardButton(text='üì≤ –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ üì≤')

    add_channel_button = InlineKeyboardButton(text='‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª', callback_data='addchannel')
    delete_channel_button = InlineKeyboardButton(text='‚ûñ –£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª', callback_data='delchannel')
    subchecking_menu = InlineKeyboardMarkup(row_width=1).add(add_channel_button, delete_channel_button)

    cancel_button = InlineKeyboardButton(text='üîô –û—Ç–º–µ–Ω–∏—Ç—å', callback_data='cancel')
    cancel_markup = InlineKeyboardMarkup(row_width=1).add(cancel_button)

    @classmethod
    def get_channels_markup(cls) -> InlineKeyboardMarkup:
        channels_markup = InlineKeyboardMarkup(row_width=1)
        for channel in get_channels():
            channels_markup.add(
                InlineKeyboardButton(
                    text=channel.title,
                    callback_data=cls.channel_callback.new(
                        id=channel.channel_id,
                        action='delete'
                    )
                )
            )
        channels_markup.add(Keyboards.cancel_button)
        return channels_markup


class Handlers:
    @staticmethod
    async def send_subchecking_menu(message: types.Message):
        text = 'üì≤ –ö–∞–Ω–∞–ª—ã –Ω–∞ –û–ü: \n\n'
        text += " \n".join(
            f"{n}) <a href='{channel.url}'>{channel.title}</a>" for n, channel in enumerate(get_channels(), start=1)
        ) + ' \n\n–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?'
        await message.answer(text=text, reply_markup=Keyboards.subchecking_menu, parse_mode='HTML')

    @staticmethod
    async def __handle_subchecking_message(message: types.Message) -> None:
        await Handlers.send_subchecking_menu(message)

    @staticmethod
    async def __handle_addchannel_callback(callback: types.CallbackQuery, state: FSMContext) -> None:
        await callback.message.delete()
        await callback.message.answer('1) –ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –±–æ—Ç–∞ –≤ –Ω—É–∂–Ω—ã–π –∫–∞–Ω–∞–ª \n'
                                      '2) –ù–∞–∑–Ω–∞—á—å—Ç–µ –µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º, —á—Ç–æ–±—ã –æ–Ω –º–æ–≥ –≤–∏–¥–µ—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ \n'
                                      '3) –ü–µ—Ä–µ—à–ª–∏—Ç–µ —Å—é–¥–∞ –ª—é–±–æ–π –ø–æ—Å—Ç –∏–∑ –∫–∞–Ω–∞–ª–∞', reply_markup=Keyboards.cancel_markup)
        await state.set_state(ChannelAdding.wait_for_post)

    @staticmethod
    async def __handle_channel_post_message(message: types.Message, state: FSMContext):
        if not message.is_forward():
            await message.answer('–≠—Ç–æ –Ω–µ –ø–æ—Å—Ç –∏–∑ –∫–∞–Ω–∞–ª–∞! –û—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É –ø–æ—Å—Ç –∏–∑ –∫–∞–Ω–∞–ª–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å')
            return

        try:
            channel = message.forward_from_chat
            bot_as_member = await channel.get_member(message.bot.id)
            if not bot_as_member.is_chat_admin():
                raise Unauthorized
        except Unauthorized:
            await message.answer(
                '–ë–æ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º –≤ —á–∞—Ç–µ! –°–¥–µ–ª–∞–π—Ç–µ –±–æ—Ç–∞ –∞–¥–º–∏–Ω–æ–º –≤ –∫–∞–Ω–∞–ª–µ, —á—Ç–æ–±—ã –æ–Ω –º–æ–≥ –≤–∏–¥–µ—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, '
                '–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É. '
            )
        except AttributeError:
            await message.answer('–≠—Ç–æ –Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞, –ª–∏–±–æ –±–æ—Ç –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª! –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É')
        else:
            await state.update_data(channel_id=channel.id, title=channel.title)
            await message.answer('–¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É, –ø–æ –∫–æ—Ç–æ—Ä–æ–π –±—É–¥—É—Ç –≤—Å—Ç—É–ø–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:',
                                 reply_markup=Keyboards.cancel_markup)
            await state.set_state(ChannelAdding.wait_for_url)

    @staticmethod
    async def __handle_message_with_url(message: types.Message, state: FSMContext):
        channel_data = await state.get_data()
        parsed_url = urlparse(message.text)
        if bool(parsed_url.scheme and parsed_url.netloc):
            save_channel(channel_data.get('channel_id'), channel_data.get('title'), message.text)
            await message.answer('‚úÖ –ö–∞–Ω–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω –Ω–∞ –û–ü!')
            await state.finish()
        else:
            await message.answer('–≠—Ç–æ –Ω–µ —Å—Å—ã–ª–∫–∞. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É, –ø–æ –∫–æ—Ç–æ—Ä–æ–π –±—É–¥—É—Ç –≤—Å—Ç—É–ø–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:')

    @staticmethod
    async def __handle_delchannel_callback(callback: types.CallbackQuery) -> None:
        await callback.message.delete()
        await callback.message.answer('–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–∞–Ω–∞–ª, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –∏—Å–∫–ª—é—á–∏—Ç—å: ',
                                      reply_markup=Keyboards.get_channels_markup())

    @staticmethod
    async def __handle_delete_channel_action_callback(callback: types.CallbackQuery, callback_data: dict):
        delete_channel(callback_data.get('id'))
        await callback.message.delete()
        await callback.message.answer('‚úÖ –ö–∞–Ω–∞–ª –∏—Å–∫–ª—é—á—ë–Ω –∏–∑ –û–ü')
        await Handlers.send_subchecking_menu(callback.message)

    @staticmethod
    async def __handle_cancel_callback(callback: types.CallbackQuery, state: FSMContext):
        await state.finish()
        await callback.message.delete()
        await Handlers.send_subchecking_menu(callback.message)

    @classmethod
    def register_necessary_subscriptions_handlers(cls, dp: Dispatcher):
        # –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏ –∏–∑ –º–µ–Ω—é –∞–¥–º–∏–Ω–∞
        dp.register_message_handler(cls.__handle_subchecking_message,
                                    is_admin=True,
                                    text=Keyboards.reply_button_for_admin_menu.text)

        # –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–ª–±—ç–∫–∞ –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª
        dp.register_callback_query_handler(cls.__handle_addchannel_callback, text='addchannel')

        # –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞
        dp.register_message_handler(cls.__handle_channel_post_message,
                                    is_admin=True,
                                    content_types=['any'],
                                    state=ChannelAdding.wait_for_post)

        # –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ —Å—Å—ã–ª–∫–æ–π
        dp.register_message_handler(cls.__handle_message_with_url,
                                    is_admin=True,
                                    content_types=['text'],
                                    state=ChannelAdding.wait_for_url)

        # –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–ª–±—ç–∫–∞ –æ—Ç–º–µ–Ω—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞
        dp.register_callback_query_handler(cls.__handle_cancel_callback, text='cancel', state='*')

        # –æ–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞ –∏–∑ –û–ü
        dp.register_callback_query_handler(cls.__handle_delchannel_callback, text='delchannel')
        dp.register_callback_query_handler(cls.__handle_delete_channel_action_callback,
                                           Keyboards.channel_callback.filter(action='delete'))

# endregion
