from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup

from src.misc.callback_data import (
    SongCallback, PlaylistCallback, PagesNavigationCallback, LanguageChoiceCallback, VkProfileCallback
)
from src.utils.vkpymusic import Song, Playlist
from src.database.models import VkProfile
from config import i18n


_ = i18n.gettext


def get_formatted_duration(seconds: int) -> str:
    hours, remainder = divmod(seconds, 3600)
    minutes, seconds = divmod(remainder, 60)

    hours_str = f"{hours:02}:" if hours else ""
    return f"{hours_str}{minutes:02}:{seconds:02}"


class UserKeyboards:
    # –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏

    @classmethod
    def get_not_subbed_markup(cls, channels_to_sub) -> InlineKeyboardMarkup | None:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞–Ω–∞–ª–∞–º–∏, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–µ–Ω –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å,
        –∏ –∫–Ω–æ–ø–∫–æ–π '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É'
        """
        if len(channels_to_sub) == 0:
            return None

        channels_markup = InlineKeyboardMarkup(row_width=1)
        [
            channels_markup.add( InlineKeyboardButton(text=channel.title, url=channel.url) )
            for channel in channels_to_sub
        ]
        check_sub_button = InlineKeyboardButton(text=_('‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å ‚úÖ'), callback_data='check_subscription')

        channels_markup.add(check_sub_button)
        return channels_markup

    # –ù–∞–≤–∏–≥–∞—Ü–∏—è

    @staticmethod
    def get_main_menu_markup() -> ReplyKeyboardMarkup:
        """ –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é """
        markup = ReplyKeyboardMarkup(resize_keyboard=True, is_persistent=True)
        markup.add(_('üé∂ –ù–æ–≤–∏–Ω–∫–∏'), _('üéß –ü–æ–ø—É–ª—è—Ä–Ω–æ–µ'))
        markup.row(_('üîç –ü–æ–∏—Å–∫'))
        return markup

    @staticmethod
    def __get_songs_navigation_buttons(
            category: str,
            current_page_num: int,
            max_pages: int = 10,
            count_per_page: int = 8,
            target_data: str | int = 'None'
    ) -> list[InlineKeyboardButton]:
        """ –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º —Å –ø–µ—Å–Ω—è–º–∏ """
        buttons = [
            InlineKeyboardButton(
                text='‚ùÆ‚ùÆ', callback_data=PagesNavigationCallback.new(
                    category=category, target_data=target_data, direction='prev',
                    page_num=current_page_num, count_per_page=count_per_page, max_pages=max_pages,
                )),
            InlineKeyboardButton(text=f'{current_page_num}/{max_pages}', callback_data='*'),
            InlineKeyboardButton(
                text='‚ùØ‚ùØ', callback_data=PagesNavigationCallback.new(
                    category=category, target_data=target_data, direction='next',
                    page_num=current_page_num, count_per_page=count_per_page, max_pages=max_pages,
                ))
        ]
        return buttons

    @staticmethod
    def get_found_songs(
            songs: list[Song],
            current_page_num: int = 1,
            max_pages: int = 10,
            category: str = 'search',
            target_data: str | int = 'None',
            append_navigation: bool = True
    ) -> InlineKeyboardMarkup:
        """ –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –Ω–∞–π–¥–µ–Ω–Ω—ã–º–∏ –ø–µ—Å–Ω—è–º–∏ –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π –ø–æ –Ω–∏–º """
        markup = InlineKeyboardMarkup()
        [
            markup.row(InlineKeyboardButton(
                text=f"{get_formatted_duration(song.duration)} | {song.title} - {song.artist}",
                callback_data=SongCallback.new(
                    id=song.song_id, owner_id=song.owner_id
                )
            ))
            for song in songs
        ]

        if append_navigation:
            nav_buttons = UserKeyboards.__get_songs_navigation_buttons(
                category=category, current_page_num=current_page_num,
                max_pages=max_pages, target_data=target_data
            )
            markup.row().add(*nav_buttons)
        return markup

    @staticmethod
    def get_found_playlists(
            playlists: list[Playlist],
            current_page_num: int = 1,
            max_pages: int = 10,
            category: str = 'search',
            target_data: str | int = 'None',
            append_navigation: bool = True
    ) -> InlineKeyboardMarkup:
        """ –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –Ω–∞–π–¥–µ–Ω–Ω—ã–º–∏ –ø–µ—Å–Ω—è–º–∏ –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π –ø–æ –Ω–∏–º """
        markup = InlineKeyboardMarkup()
        for playlist in playlists:
            markup.row(InlineKeyboardButton(
                text=str(playlist),
                callback_data=PlaylistCallback.new(
                    id=playlist.playlist_id, owner_id=playlist.owner_id, access_key=playlist.access_key
                )
            ))
        if append_navigation:
            nav_buttons = UserKeyboards.__get_songs_navigation_buttons(
                category=category, current_page_num=current_page_num,
                max_pages=max_pages, target_data=target_data
            )
            markup.row().add(*nav_buttons)
        return markup

    @staticmethod
    def get_recognize_song_from_video_button() -> InlineKeyboardMarkup:
        """  """
        markup = InlineKeyboardMarkup(row_width=1)
        markup.add(InlineKeyboardButton(text=_('üéµ –£–∑–Ω–∞—Ç—å –ø–µ—Å–Ω—é üéµ'), callback_data='recognize_song_from_video'))
        return markup

    # –í—ã–±–æ—Ä —è–∑—ã–∫–∞
    @staticmethod
    def get_languages_markup() -> InlineKeyboardMarkup:
        """ –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º —è–∑—ã–∫–∞"""
        markup = InlineKeyboardMarkup(row_width=1, resize_keyboard=True, is_persistent=True)
        markup.add(InlineKeyboardButton('üá∑üá∫ –†—É—Å—Å–∫–∏–π', callback_data=LanguageChoiceCallback.new(lang_code='ru')))
        markup.add(InlineKeyboardButton('üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∏–π', callback_data=LanguageChoiceCallback.new(lang_code='uk')))
        markup.add(InlineKeyboardButton('üá∫üáø O\'zbekcha', callback_data=LanguageChoiceCallback.new(lang_code='uz')))
        return markup

    # –ü—Ä–æ—Ñ–∏–ª–∏
    @staticmethod
    def get_user_saved_profiles(profiles: list[VkProfile]) -> InlineKeyboardMarkup:
        """ –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É —Å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–º–∏ —é–∑–µ—Ä–æ–º –ø—Ä–æ—Ñ–∏–ª—è–º–∏ """
        markup = InlineKeyboardMarkup(row_width=1)

        if profiles:
            for profile in profiles:
                profile_button = InlineKeyboardButton(
                    text=profile.name, callback_data=VkProfileCallback.new(action='show', profile_id=profile.id)
                )
                markup.add(profile_button)

        markup.add(InlineKeyboardButton(text=_('‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å ‚ûï'), callback_data='add_profile'))
        return markup

    @staticmethod
    def get_actions_with_profile(vk_profile: VkProfile) -> InlineKeyboardMarkup:
        markup = InlineKeyboardMarkup(row_width=1)

        show_audios = InlineKeyboardButton(
            text=_('–ê—É–¥–∏–æ–∑–∞–ø–∏—Å–∏'),
            callback_data=VkProfileCallback.new(action='audios', profile_id=vk_profile.id))
        show_playlists = InlineKeyboardButton(
            text=_('–ü–ª–µ–π–ª–∏—Å—Ç—ã'),
            callback_data=VkProfileCallback.new(action='playlists', profile_id=vk_profile.id))
        delete_profile = InlineKeyboardButton(
            text=_('–£–¥–∞–ª–∏—Ç—å'),
            callback_data=VkProfileCallback.new(action='remove', profile_id=vk_profile.id))

        markup.add(show_audios, show_playlists, delete_profile)
        return markup

    @staticmethod
    def get_cancel_profile_adding() -> InlineKeyboardMarkup:
        markup = InlineKeyboardMarkup(row_width=1)
        markup.add(InlineKeyboardButton(text=_('–û—Ç–º–µ–Ω–∞'), callback_data='cancel_profile_adding'))
        return markup
